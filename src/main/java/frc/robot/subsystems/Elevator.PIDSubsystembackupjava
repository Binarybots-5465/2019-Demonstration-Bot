 /*----------------------------------------------------------------------------*/
/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package frc.robot.subsystems;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.command.PIDSubsystem;

import frc.robot.RobotMap;

/**
 * This controls the elevator and should be able to set the elevator to a specific posistion
 */
public class Elevator extends PIDSubsystem {
  
  private VictorSP elevatorMotorController1 = new VictorSP(RobotMap.elevatorLiftMotor1PWMID);
  private VictorSP elevatorMotorController2 = new VictorSP(RobotMap.elevatorLiftMotor2PWMID);

  private Encoder AMTEncoder = new Encoder(RobotMap.elevatorEncoderAChannelDIOID, RobotMap.elevatorEncoderBChannelDIOID); //Uses the AMT103-V encoder with inputs for A, B and index channel

  public Elevator() {
    super("Elevator", RobotMap.elevatorGains.kP, RobotMap.elevatorGains.kI, RobotMap.elevatorGains.kD);
    setAbsoluteTolerance(RobotMap.elevatorPIDTolerance); //Sets tolerance for PID loop

    //Resets the encoder and sets the PID source on startup
    AMTEncoder.setPIDSourceType(PIDSourceType.kDisplacement);
    AMTEncoder.reset();
    RobotMap.elevatorBottomPosition = getElevatorHeight(); //Sets the bottom distance to the elevator height at the bottom
  }

  public void setElevatorPosition(double inches) {
    if(inches > RobotMap.elevatorTopPosition) {
      inches = RobotMap.elevatorTopPosition;
      System.out.println("Elevator setpoint set above physical MAXIMUM");
    }
    if(inches < RobotMap.elevatorBottomPosition) {
      inches = RobotMap.elevatorBottomPosition;
      System.out.println("Elevator setpoint set above physical MINIMUM");
    }
    setSetpoint(inchesToRawEncoder(inches - RobotMap.elevatorMountHeight)); //Sets the set point to move the elevator subtracted by the height at which the elevator is mounted at
  }

  public double getElevatorHeight() {
    return rawEncoderToInches(AMTEncoder.getDistance());
  }

  public boolean isInPlace() {
    return onTarget(); //Returns true if the distance is within the setpoint and tolerances
  }
  
  protected static double inchesToRawEncoder(double inches) {
    double correctedInches = 3584.81*Math.pow(-1 - 4217.87/(-4227.24 + inches), 0.980567120799986); //Undo's the regression converting the distance correction
    return correctedInches * RobotMap.AMTEncoderResolution / (2 * Math.PI * RobotMap.elevatorOverallDriveRatio) / 100; //Converts to from inches to rotation ticks
  }

  protected static double rawEncoderToInches(double encoderTicks) {
    double x = 100 * encoderTicks * 2 * Math.PI * RobotMap.elevatorOverallDriveRatio / (RobotMap.AMTEncoderResolution); //Converts from encoder ticks and multiplies to get to inches
    return 4227.24 + (9.371548 - 4227.24)/( 1 + Math.pow(x/3584.812, 1.019818) ); // Corrects result from above to the correct absolute value accounting the inital starting height of the mechanism.
                                                                                  // Bottom position ~ 9.3 inches instead of bottom position = 0.0 inches (The bottom resting position takes account for the frame). 
                                                                                  // Equation used for correction wass taken from a Symmetrical Sigmoidal regression of point made from the original rotation-distance conversion and the actual height distances.
  }

  protected double motionEquationSqrt(double x) {
    return Math.sqrt( -1 * Math.signum(rawEncoderToInches(getSetpoint()) - x) * (x - rawEncoderToInches(getSetpoint())) )  /  Math.sqrt(rawEncoderToInches(getSetpoint())); //X is the current height in inches
    //If the height is higher than the set point than the motor speed curve also flips the sqrt direction
  }

  protected double motionEquationLn(double x) {
    return Math.max( 0, Math.log( -1 * Math.signum(rawEncoderToInches(getSetpoint()) - x) * (x - rawEncoderToInches(getSetpoint())) + 1)  /  Math.log(rawEncoderToInches(getSetpoint()) + 1) ); //X is the current height in inches
    //If the height is higher than the set point than the motor speed curve also flips the sqrt direction
  }

  @Override
  public void initDefaultCommand() {
    
  }

  @Override
  protected double returnPIDInput() {
    return AMTEncoder.getDistance(); //Get's the current height of the elevator in inches for setpoint
  }

  @Override
  protected void usePIDOutput(double output) {
    double height = getElevatorHeight();
    if( ( (Double.isNaN(height) == true || height <=  RobotMap.elevatorBottomPosition + 0.1) && AMTEncoder.getDirection() == false) || //At bottom & heading downward
        (height >= RobotMap.elevatorTopPosition && AMTEncoder.getDirection() == true) ) { //At top & heading up
      elevatorMotorController1.pidWrite(0);
      elevatorMotorController2.pidWrite(0);
    } else {
      elevatorMotorController1.pidWrite(output);
      elevatorMotorController2.pidWrite(output);
    }
  }
}
